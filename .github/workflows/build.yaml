name: Stage Build

permissions:
  id-token: write
  contents: read

env:
  PKG_ACTOR: ${{ secrets.PKG_ACTOR }}
  PKG_TOKEN: ${{ secrets.PKG_TOKEN }}

on:
  workflow_call:
    inputs:
      GITHUB_ROLE:
        required: true
        type: string
      AWS_REGION:
        required: false
        type: string
        default: eu-central-1
      AWS_ACCOUNT_ID:
        required: true
        type: string
      AWS_ECR_APP_PATH:
        required: true
        type: string
      DOCKER_IMAGE_VERSION:
        required: false
        type: string
      USE_COMMIT_HASH_AS_DOCKER_IMAGE_VERSION:
        required: false
        type: boolean
        default: false
      ENVIRONMENT_NAME:
        required: false
        type: string
        default: production
    outputs:
      DEPLOYMENT_ID:
        value: ${{ jobs.build.steps.deployment.outputs.deployment_id }}
    secrets:
      PKG_ACTOR:
        required: true
      PKG_TOKEN:
        required: true

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: Default Checkout
        uses: actions/checkout@v4

      - name: JDK - Setup
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: corretto

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.PKG_ACTOR }}
          password: ${{ secrets.PKG_TOKEN }}

      - name: Gradle - Build
        run: ./gradlew clean build -x test

      - name: Create GitHub deployment
        uses: chrnorm/deployment-action@v2.0.7
        id: deployment
        with:
          token: ${{ github.token }}
          environment: ${{ inputs.ENVIRONMENT_NAME }}

      - name: Configure AWS Credentials
        if: ${{ inputs.AWS_ACCOUNT_ID != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ inputs.AWS_ACCOUNT_ID }}:role/${{ inputs.GITHUB_ROLE }}
          role-session-name: ${{ inputs.GITHUB_ROLE }}-oidc
          aws-region: ${{ inputs.AWS_REGION }}

      - name: AWS ECR - Setup
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker - Build
        env:
          IMAGE_URL: ${{ inputs.AWS_ACCOUNT_ID }}.dkr.ecr.${{ inputs.AWS_REGION }}.amazonaws.com${{ inputs.AWS_ECR_APP_PATH }}
          IMAGE_TAG: ${{ inputs.DOCKER_IMAGE_VERSION || 'latest' }}
        run: |
            echo "IMAGE_URL=${{ env.IMAGE_URL }}" >> $GITHUB_ENV
            docker build --platform linux/amd64 --tag ${{ env.IMAGE_URL }}:${{ env.IMAGE_TAG }} .

            if [ "${{ inputs.USE_COMMIT_HASH_AS_DOCKER_IMAGE_VERSION }}" = "true" ]; then
              docker tag ${{ env.IMAGE_URL }}:${{ env.IMAGE_TAG }} ${{ env.IMAGE_URL }}:$(git rev-parse --short ${{ github.sha }})
            fi

      - name: Docker ECR - Push
        run: docker push ${{ env.IMAGE_URL }} --all-tags
